name: test

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: ./.github/actions/setup-poetry-env
        with:
          poetry-options: --only=check
          python-version: "3.11"
          working-directory: backend

      - name: Set up Node environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run check target
        run: make check

  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libmemcached-dev
          version: 1.0

      - name: Set up Python environment
        uses: ./.github/actions/setup-poetry-env
        with:
          python-version: ${{ matrix.python-version }}
          working-directory: backend

      - name: Run backend test target
        working-directory: backend
        run: make test

      - name: "Upload coverage data"
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}
          path: backend/.coverage.*
          if-no-files-found: ignore
          include-hidden-files: true

  backend-coverage:
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: ./.github/actions/setup-poetry-env
        with:
          python-version: "3.11"
          poetry-options: --only=test
          working-directory: backend

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          path: backend
          pattern: coverage-data-*
          merge-multiple: true

      - name: Run coverage target
        run: make coverage

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: backend-report
          path: htmlcov
        if: ${{ failure() }}

  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20', '22']
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Node environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run test target
        working-directory: frontend
        run: make test

  frontend-coverage:
    runs-on: ubuntu-latest
    needs: frontend-test

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Node environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run coverage target
        working-directory: frontend
        run: make coverage

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: frontend-report
          path: coverage
        if: ${{ failure() }}

